function [Time,Press,Tem,pR,hAl,tSpee,dDi,rBat,tPTem,pDew,SH,MR,Et,Ozone,O3Curr,O3Temp,AD1,AD2,AD3,AD4,AD5,AD6] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [TIME,PRESS,TEM,PR,HAL,TSPEE,DDI,RBAT,TPTEM,PDEW,SH,MR,ET,OZONE,O3CURR,O3TEMP,AD1,AD2,AD3,AD4,AD5,AD6] =
%   IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default selection.
%
%   [TIME,PRESS,TEM,PR,HAL,TSPEE,DDI,RBAT,TPTEM,PDEW,SH,MR,ET,OZONE,O3CURR,O3TEMP,AD1,AD2,AD3,AD4,AD5,AD6] =
%   IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   [Time,Press,Tem,pR,hAl,tSpee,dDi,rBat,tPTem,pDew,SH,MR,Et,Ozone,O3Curr,O3Temp,AD1,AD2,AD3,AD4,AD5,AD6] =
%   importfile('E1349535_01.DAT',4, 8804);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/10/27 13:46:35

%% Initialize variables.
if nargin<=2
    startRow = 4;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%8s%7s%7s%7s%7s%7s%7s%7s%8s%6s%7s%7s%7s%9s%7s%7s%7s%7s%7s%7s%7s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file,
% try regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray));
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]
    % Converts strings in the input cell array to numbers. Replaced non-numeric strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]);
rawCellColumns = raw(:, 1);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
Time = rawCellColumns(:, 1);
Press = cell2mat(rawNumericColumns(:, 1));
Tem = cell2mat(rawNumericColumns(:, 2));
pR = cell2mat(rawNumericColumns(:, 3));
hAl = cell2mat(rawNumericColumns(:, 4));
tSpee = cell2mat(rawNumericColumns(:, 5));
dDi = cell2mat(rawNumericColumns(:, 6));
rBat = cell2mat(rawNumericColumns(:, 7));
tPTem = cell2mat(rawNumericColumns(:, 8));
pDew = cell2mat(rawNumericColumns(:, 9));
SH = cell2mat(rawNumericColumns(:, 10));
MR = cell2mat(rawNumericColumns(:, 11));
Et = cell2mat(rawNumericColumns(:, 12));
Ozone = cell2mat(rawNumericColumns(:, 13));
O3Curr = cell2mat(rawNumericColumns(:, 14));
O3Temp = cell2mat(rawNumericColumns(:, 15));
AD1 = cell2mat(rawNumericColumns(:, 16));
AD2 = cell2mat(rawNumericColumns(:, 17));
AD3 = cell2mat(rawNumericColumns(:, 18));
AD4 = cell2mat(rawNumericColumns(:, 19));
AD5 = cell2mat(rawNumericColumns(:, 20));
AD6 = cell2mat(rawNumericColumns(:, 21));

